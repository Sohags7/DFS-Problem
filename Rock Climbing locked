#include<bits/stdc++.h>
#define ll  long long 
#define ld  long double 
#define ff first
#define ss second
#define pb push_back
#define pf push_front
#define vec vector
#define min_heap priority_queue <ll, vector<ll>, greater<ll> >
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),vine present(container, element)(container.find(element) != container.end())
#define cpresent(container, element)(find(all(container), element) != container.end())
#define gcd(a,b) __gcd(a,b)
#define     max3(a,b,c)     max(a,max(b,c))
#define     max4(a,b,c,d)   max(max3(a,b,c),d)
#define     min3(a,b,c)     min(a,min(b,c))
#define     min4(a,b,c,d)   min(a,min3(b,c,d))
#define er cout<<-1<<endl;
#define  fast ios_base::sync_with_stdio(false);cin.tie(NULL);
#define  mod 1000000007     // 1e9+7
#define pi 3.1415926536
#define REP(i,a,b) for (int i = a; i <= b; i++)
#define fset(n) __builtin_ffs(n)
#define trailzerobit(n) __builtin_ctz(n)
#define set_bit(n) __builtin_popcountll(n)
using namespace std;
    //debbug
template < typename F, typename S >
  ostream & operator << (ostream & os, const pair < F, S > &p)
{
  return os << "(" << p.first << ", " << p.second << ")";
}
 
template < typename T >
  ostream & operator << (ostream & os, const vector < T > &v)
{
  os << "{";
  for (auto it = v.begin (); it != v.end (); ++it)
    {
      if (it != v.begin ())
    os << ", ";
      os << *it;
    }
  return os << "}";
}
 
template < typename T >
  ostream & operator << (ostream & os, const set < T > &v)
{
  os << "[";
  for (auto it = v.begin (); it != v.end (); ++it)
    {
      if (it != v.begin ())
    os << ", ";
      os << *it;
    }
  return os << "]";
}
 
template < typename T >
  ostream & operator << (ostream & os, const multiset < T > &v)
{
  os << "[";
  for (auto it = v.begin (); it != v.end (); ++it)
    {
      if (it != v.begin ())
    os << ", ";
      os << *it;
    }
  return os << "]";
}
 
template < typename F, typename S >
  ostream & operator << (ostream & os, const map < F, S > &v)
{
  os << "[";
  for (auto it = v.begin (); it != v.end (); ++it)
    {
      if (it != v.begin ())
    os << ", ";
      os << it->first << " = " << it->second;
    }
  return os << "]";
}
 
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
 
void
faltu ()
{
  cerr << endl;
}
 
template < typename T > void
faltu (T a[], int n)
{
  for (int i = 0; i < n; ++i)
    cerr << a[i] << ' ';
  cerr << endl;
}
 
template < typename T, typename ... hello > void
faltu (T arg, const hello & ... rest)
{
  cerr << arg << ' ';
  faltu (rest ...);
}               //debug
 
void no ()
{
  cout << "NO" << endl;
}
 
void yes ()
{
  cout << "YES" << endl;
 
 
}
 
ll power (ll base, ll x)
{
  ll s = 1;
  for (ll i = 1; i <= x; i++)
    {
      s = (s*base);
 
    }
  return s;
 
}
bool poweroftwo(ll x)
{
   return !(x&(x-1ll));
 
}
 
ll lcm(ll x,ll y)
{
  return (x*y)/__gcd(x,y);
 
} 
const int sz=1e6+7;
ll dx[] = {0, 0, +1, -1};
ll dy[] = {+1, -1, 0, 0};


ll a[100][100];
bool visit[100][100]={0};

ll n,m;
ll gx=-1;
ll gy=-1;

bool is_valid(ll x,ll y)
{
  if(x>=1 && x<=n  && y>=1 && y<=m && visit[x][y]==false)
  {
    return true;
  }

  return false;

}

 bool ok=0;
 void dfs(ll x,ll y,ll k)
{
  visit[x][y]=true;
  

  if(a[x][y]==3)
  {
    ok=true;
    return;
  }

  if(y+1<=m && a[x][y+1]!=0 &&  visit[x][y+1]==false)
  {
    dfs(x,y+1,k);
 
  }
  else if(y-1>=1 && a[x][y-1]!=0 &&  visit[x][y-1]==false)
  {
    dfs(x,y-1,k);
  
  }


  for(int i=1;i<=k;i++)
  {
    if(is_valid(x+i,y) && a[x+i][y]!=0)
    {
      dfs(x+i,y,k);
    }
  }
  for(int i=1;i<=k;i++)
  {
   if(is_valid(x-i,y) &&  a[x-i][y]!=0)
    {
      dfs(x-i,y,k);
    }
  }

}


void solve(ll test)
{

cin>>n>>m;


for(int i=1;i<=n;i++)
{
for(int j=1;j<=m;j++){
  cin>>a[i][j];
  
}
}

ll ans=100;

for( ll level=10;level>=0;level--)
{
  memset(visit,false,sizeof(visit));
  ok=false;
   dfs(n,1,level);
   
   if(ok==true)
   {
    

    ans=level;
   }
}

cout<<ans<<endl;

}


int main (){


  #ifndef ONLINE_JUDGE
freopen ("input.txt","r", stdin);
freopen ("outt.txt","w", stdout);
 #endif

  ios_base::sync_with_stdio(false);
  cin.tie(NULL); 
 
//int t;cin>>t;for(ll i=1;i<=t;i++)
solve(1);

return 0;
 
}
