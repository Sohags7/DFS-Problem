#include<iostream>
#include <set>
#include <vector>
#include <set>
#include <queue>
#define ll long long int 
using namespace std; 


ll dx[] = {0, 0, +1, -1};
ll dy[] = {+1, -1, 0, 0};

ll a[1005][1005];
bool visit[1005][1005];
ll level[1005][1005];

ll n,m,r,c,k;

set<ll>rt={1,3,4,5};
set<ll>lt={1,3,6,7};
set<ll>up={1,2,4,7};
set<ll>down={1,2,5,6};




bool isvalid(ll x,ll y)
{
  if(x>=0 && x<n && y>=0 && y<m && a[x][y]!=0  && visit[x][y]==false)
  {
    return true;

  }
  return false;
}
bool check(ll s_x,ll s_y,ll d_x ,ll d_y,ll x_c,ll y_c)
{
  if(up.count(a[s_x][s_y])==1 && down.count(a[d_x][d_y])==1 && x_c==-1 && y_c==0)
  {
    return true;
  }
  if(down.count(a[s_x][s_y])==1 && up.count(a[d_x][d_y])==1 && x_c==1 && y_c==0)
    return true;
  if(rt.count(a[s_x][s_y])==1 && lt.count(a[d_x][d_y])==1 && x_c==0 && y_c==+1 )
  {
    return true;
  }
  if(lt.count(a[s_x][s_y])==1 && rt.count(a[d_x][d_y])==1  && x_c==0 && y_c==-1)
  {
    return true;
  }

  return false;

}

 ll bfs(ll x,ll y)
 {

  level[x][y]=1;
  visit[x][y]=true;
  if(a[x][y]==0)return 0;

  ll ans=0;
  ans=1;

  queue< pair<ll,ll> >q;
  q.push({x,y});
 

  while(!q.empty())
  {
    ll new_x=q.front().first;
    ll new_y=q.front().second;
      q.pop();
    

    visit[new_x][new_y]=true;

  
     for(int i=0;i<4;i++)
     {
      ll r=new_x+dx[i];
      ll c=new_y+dy[i];


      if(isvalid(r,c) && check(new_x,new_y,r,c,dx[i],dy[i]))
      {
        level[r][c]=level[new_x][new_y]+1;
        if(level[r][c]<=k)
        {
         ans++;
        }
        visit[r][c]=true;
        q.push({r,c});
      }

     }

  }


return ans;

 }





void solve(ll test)
{
 

 cin>>n>>m>>r>>c>>k;
 for(int i=0;i<=1001;i++)
 {
  for(int j=0;j<=1001;j++){
    a[i][j]=0;
    visit[i][j]=0;  
    level[i][j]=0;

  }
 }


 for(int i=0;i<n;i++)
 {
  for(int j=0;j<m;j++){
    cin>>a[i][j];
  }
 }

 ll ans=bfs(r,c);


 cout<<ans<<endl;







}




int main ()
{

  #ifndef ONLINE_JUDGE
freopen ("input.txt","r", stdin);
freopen ("outt.txt","w", stdout);
 #endif


  ios_base::sync_with_stdio(false);
  cin.tie(NULL); 

 
int t;cin>>t;for(ll i=1;i<=t;i++)
solve(i);

return 0;
 
}
